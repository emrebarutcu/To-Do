rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Users collection - users can only access their own data
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Families collection and subcollections
    match /families/{familyId} {
      
      // Family document - readable by all family members
      allow read: if request.auth != null && 
        request.auth.uid in resource.data.memberIds;
      
      // Only parents can create and update families
      allow write: if request.auth != null && 
        request.auth.uid == resource.data.created_by;
      
      // Members subcollection
      match /members/{memberId} {
        // Family members can read all members in their family
        allow read: if request.auth != null && 
          (request.auth.uid == memberId || 
           request.auth.uid in get(/databases/$(database)/documents/families/$(familyId)).data.memberIds);
        
        // Only parents can create/update/delete members
        allow write: if request.auth != null && 
          exists(/databases/$(database)/documents/families/$(familyId)/members/$(request.auth.uid)) &&
          get(/databases/$(database)/documents/families/$(familyId)/members/$(request.auth.uid)).data.role == 'parent';
      }
      
      // Tasks subcollection
      match /tasks/{taskId} {
        // Family members can read all tasks in their family
        allow read: if request.auth != null && 
          request.auth.uid in get(/databases/$(database)/documents/families/$(familyId)).data.memberIds;
        
        // Only parents can create and assign tasks
        allow create: if request.auth != null && 
          exists(/databases/$(database)/documents/families/$(familyId)/members/$(request.auth.uid)) &&
          get(/databases/$(database)/documents/families/$(familyId)/members/$(request.auth.uid)).data.role == 'parent';
        
        // Parents can update any task, children can only mark their own tasks as completed
        allow update: if request.auth != null && 
          (
            // Parent can update any task
            (exists(/databases/$(database)/documents/families/$(familyId)/members/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/families/$(familyId)/members/$(request.auth.uid)).data.role == 'parent') ||
            // Child can only mark their own task as completed/submitted
            (resource.data.assigned_to == request.auth.uid &&
             request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'completed_at']) &&
             request.resource.data.status in ['submitted', 'pending'])
          );
        
        // Only parents can delete tasks
        allow delete: if request.auth != null && 
          exists(/databases/$(database)/documents/families/$(familyId)/members/$(request.auth.uid)) &&
          get(/databases/$(database)/documents/families/$(familyId)/members/$(request.auth.uid)).data.role == 'parent';
      }
      
      // Rewards subcollection
      match /rewards/{rewardId} {
        // Family members can read all rewards
        allow read: if request.auth != null && 
          request.auth.uid in get(/databases/$(database)/documents/families/$(familyId)).data.memberIds;
        
        // Only parents can create, update, and delete rewards
        allow write: if request.auth != null && 
          exists(/databases/$(database)/documents/families/$(familyId)/members/$(request.auth.uid)) &&
          get(/databases/$(database)/documents/families/$(familyId)/members/$(request.auth.uid)).data.role == 'parent';
      }
    }
    
    // Redeemed rewards collection
    match /redeemed_rewards/{rewardId} {
      // Users can read their own redeemed rewards and parents can read all family rewards
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.childId ||
         (exists(/databases/$(database)/documents/families/$(resource.data.familyId)/members/$(request.auth.uid)) &&
          get(/databases/$(database)/documents/families/$(resource.data.familyId)/members/$(request.auth.uid)).data.role == 'parent'));
      
      // Children can create redemption requests, parents can update status
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.childId;
      
      allow update: if request.auth != null && 
        exists(/databases/$(database)/documents/families/$(resource.data.familyId)/members/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/families/$(resource.data.familyId)/members/$(request.auth.uid)).data.role == 'parent';
      
      // Only parents can delete redeemed rewards
      allow delete: if request.auth != null && 
        exists(/databases/$(database)/documents/families/$(resource.data.familyId)/members/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/families/$(resource.data.familyId)/members/$(request.auth.uid)).data.role == 'parent';
    }
    
    // Notifications collection
    match /notifications/{notificationId} {
      // Users can only read their own notifications
      allow read: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      
      // System can create notifications, users can update (mark as read)
      allow create: if request.auth != null;
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      
      // Users can delete their own notifications
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.userId;
    }
    
    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}